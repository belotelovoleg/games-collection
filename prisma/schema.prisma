// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          Role      @default(USER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  games    Game[]

  @@map("users")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Game collection models
model Game {
  id          String      @id @default(cuid())
  title       String
  platform    Platform
  condition   Condition   @default(GOOD)
  genre       String?
  developer   String?
  publisher   String?
  releaseYear Int?
  price       Float?
  purchaseDate DateTime?
  notes       String?
  imageUrl    String?
  completed   Boolean     @default(false)
  favorite    Boolean     @default(false)
  
  // Relations
  userId      String      @map("user_id")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("games")
}

// Console/Platform model for IGDB integration
model Console {
  id                    String   @id @default(cuid())
  igdbConsoleID         Int?     @unique @map("igdb_console_id")
  igdbConsoleVersionID  Int?     @unique @map("igdb_console_version_id")
  name                  String
  photo                 String?
  abbreviation          String?
  alternativeName       String?  @map("alternative_name")
  generation            Int?
  platformFamily        String?  @map("platform_family")
  platformType          String?  @map("platform_type")
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("consoles")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum Platform {
  PLAYSTATION_1
  PLAYSTATION_2
  PLAYSTATION_3
  PLAYSTATION_4
  PLAYSTATION_5
  XBOX
  XBOX_360
  XBOX_ONE
  XBOX_SERIES
  NINTENDO_SWITCH
  NINTENDO_3DS
  NINTENDO_WII
  NINTENDO_WII_U
  PC
  OTHER
}

enum Condition {
  MINT
  EXCELLENT
  GOOD
  FAIR
  POOR
}
