// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          Role      @default(USER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  games    Game[]
  userConsoles UserConsole[]

  @@map("users")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Game collection models
model Game {
  id              String      @id @default(cuid())
  
  // IGDB reference (optional - for games from IGDB)
  igdbGameId      Int?        @map("igdb_game_id")
  
  // Basic game information (filled from IGDB or manually)
  title           String      @map("name") // Game name
  alternativeNames String[]   @map("alternative_names") // Array of alternative names
  cover           String?     // Cover image URL (from IGDB or uploaded by user)
  photos          String[]    // User's personal photos of their copy (up to 5)
  screenshot      String?     // One screenshot URL (from IGDB or uploaded by user)
  summary         String?     @db.Text
  
  // Game metadata (filled from IGDB or manually)
  genres          String[]    // Array of genre names
  franchises      String[]    // Array of franchise names
  platforms       Int[]       // Array of IGDB platform IDs
  rating          Float?      // Game rating (0-100 scale from IGDB)
  multiplayerModes String[]   @map("multiplayer_modes") // Array of multiplayer mode descriptions
  
  // User-specific collection data
  consoleIds      Int[]       // Which consoles this game works on (array of console IDs)
  condition       Condition   @default(GOOD)
  developer       String[]
  publisher       String[]
  releaseYear     Int?
  price           Float?      // What user paid for it
  purchaseDate    DateTime?
  notes           String?     @db.Text
  completed       Boolean     @default(false)
  favorite        Boolean     @default(false)
  
  // Relations
  userId          String      @map("user_id")
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  igdbGame        IgdbGame?   @relation(fields: [igdbGameId], references: [id])
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("games")
}

// Console/Platform model for IGDB integration
model Console {
  id                    Int      @id @default(autoincrement())
  igdbPlatformID        Int?     @map("igdb_platform_id")
  igdbPlatformVersionID Int?     @map("igdb_platform_version_id")
  name                  String
  photo                 String?
  abbreviation          String?
  alternativeName       String?  @map("alternative_name")
  generation            Int?
  platformFamily        String?  @map("platform_family")
  platformType          String?  @map("platform_type")
  
  // Relations to cached IGDB data (updated to reference igdbId fields)
  igdbPlatform          IgdbPlatform?        @relation(fields: [igdbPlatformID], references: [id])
  igdbPlatformVersion   IgdbPlatformVersion? @relation(fields: [igdbPlatformVersionID], references: [id])
  
  // User console relations
  userConsoles          UserConsole[]
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("consoles")
}

// ============================================================================
// IGDB NORMALIZED MODELS (CLEANED - NO LOCAL TIMESTAMPS)
// ============================================================================

model IgdbPlatformLogo {
  id           Int      @id // IGDB ID directly
  alphaChannel Boolean? @map("alpha_channel")
  animated     Boolean?
  checksum     String?
  height       Int?
  imageId      String?  @map("image_id")
  url          String?
  width        Int?

  // Relations
  platforms        IgdbPlatform[]
  platformVersions IgdbPlatformVersion[]

  @@map("igdb_platform_logos")
}

model IgdbPlatformFamily {
  id        Int      @id // IGDB ID directly
  checksum  String?
  name      String
  slug      String?

  // Relations
  platforms IgdbPlatform[]

  @@map("igdb_platform_families")
}

model IgdbPlatformType {
  id              Int      @id // IGDB ID directly
  checksum        String?
  name            String

  // Relations
  platforms IgdbPlatform[]

  @@map("igdb_platform_types")
}

model IgdbCompanyLogo {
  id           Int      @id // IGDB ID directly
  alphaChannel Boolean? @map("alpha_channel")
  animated     Boolean?
  checksum     String?
  height       Int?
  imageId      String?  @map("image_id")
  url          String?
  width        Int?

  // Relations
  companies IgdbCompany[]

  @@map("igdb_company_logos")
}

model IgdbCompany {
  id                  Int      @id // IGDB ID directly
  changeDate          BigInt?  @map("change_date")
  changeDateFormatId  Int?     @map("change_date_format_id")
  changedCompanyId    Int?     @map("changed_company_id")
  checksum            String?
  country             Int?
  description         String?  @db.Text
  logoId              Int?     @map("logo_id")
  name                String
  parentId            Int?     @map("parent_id")
  slug                String?
  startDate           BigInt?  @map("start_date")
  startDateFormatId   Int?     @map("start_date_format_id")
  statusId            Int?     @map("status_id")
  url                 String?

  // Relations - keep only logo relation, remove all foreign key constraints
  logo                IgdbCompanyLogo? @relation(fields: [logoId], references: [id])

  @@map("igdb_companies")
}

model IgdbWebsiteType {
  id              Int      @id // IGDB ID directly
  checksum        String?
  type            String

  // Relations
  platformWebsites IgdbPlatformWebsite[]

  @@map("igdb_website_types")
}

model IgdbPlatformWebsite {
  id        Int      @id // IGDB ID directly
  checksum  String?
  trusted   Boolean  @default(false)
  typeId    Int?     @map("type_id")
  url       String

  // Relations
  type      IgdbWebsiteType? @relation(fields: [typeId], references: [id])
  platformWebsiteRelations IgdbPlatformWebsiteRelation[]

  @@map("igdb_platform_websites")
}

model IgdbPlatform {
  id                Int      @id // IGDB ID directly
  abbreviation      String?
  alternativeName   String?  @map("alternative_name")
  checksum          String?
  generation        Int?
  name              String
  platformFamilyId  Int?     @map("platform_family_id")
  platformLogoId    Int?     @map("platform_logo_id")
  platformTypeId    Int?     @map("platform_type_id")
  slug              String?
  summary           String?  @db.Text
  url               String?
  versions          Int[]    // Array of platform version IDs from IGDB
  igdbData          String?  @db.Text @map("igdb_data")

  // Relations
  platformFamily    IgdbPlatformFamily? @relation(fields: [platformFamilyId], references: [id])
  platformLogo      IgdbPlatformLogo?   @relation(fields: [platformLogoId], references: [id])
  platformType      IgdbPlatformType?   @relation(fields: [platformTypeId], references: [id])
  
  // Many-to-many relationships
  platformVersionRelations IgdbPlatformVersionRelation[]
  platformWebsiteRelations IgdbPlatformWebsiteRelation[]
  
  // Existing console relations
  consoles          Console[]

  @@map("igdb_platforms")
}

model IgdbPlatformVersion {
  id                    Int      @id // IGDB ID directly
  checksum              String?
  connectivity          String?
  cpu                   String?
  graphics              String?
  mainManufacturerId    Int?     @map("main_manufacturer_id")
  media                 String?
  memory                String?
  name                  String
  os                    String?
  output                String?
  platformLogoId        Int?     @map("platform_logo_id")
  resolutions           String?
  slug                  String?
  sound                 String?
  storage               String?
  summary               String?  @db.Text
  url                   String?
  igdbData              String?  @db.Text @map("igdb_data")

  // Relations - simplified, no strict foreign keys for companies
  platformLogo          IgdbPlatformLogo? @relation(fields: [platformLogoId], references: [id])
  
  // Many-to-many relationships (removed release dates)
  platformVersionRelations IgdbPlatformVersionRelation[]
  
  // Existing console relations
  consoles              Console[]

  @@map("igdb_platform_versions")
}

// ============================================================================
// RELATIONSHIP MODELS (Many-to-Many)
// ============================================================================

model IgdbPlatformVersionRelation {
  id                Int      @id @default(autoincrement())
  platformId        Int      @map("platform_id")
  versionId         Int      @map("version_id")

  // Relations
  platform          IgdbPlatform        @relation(fields: [platformId], references: [id])
  platformVersion   IgdbPlatformVersion @relation(fields: [versionId], references: [id])

  @@unique([platformId, versionId])
  @@map("igdb_platform_version_relations")
}

model IgdbPlatformWebsiteRelation {
  id                Int      @id @default(autoincrement())
  platformId        Int      @map("platform_id")
  websiteId         Int      @map("website_id")

  // Relations
  platform          IgdbPlatform        @relation(fields: [platformId], references: [id])
  website           IgdbPlatformWebsite @relation(fields: [websiteId], references: [id])

  @@unique([platformId, websiteId])
  @@map("igdb_platform_website_relations")
}

model IgdbPlatformVersionCompanyRelation {
  id                        Int      @id @default(autoincrement())
  platformVersionId         Int      @map("platform_version_id")
  companyId                 Int      @map("company_id")

  @@unique([platformVersionId, companyId])
  @@map("igdb_platform_version_company_relations")
}

// User console collection model
model UserConsole {
  id        String              @id @default(cuid())
  userId    String              @map("user_id")
  consoleId Int                 @map("console_id")
  status    UserConsoleStatus   @default(OWNED)
  notes     String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  // Relations
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  console   Console             @relation(fields: [consoleId], references: [id], onDelete: Cascade)

  @@unique([userId, consoleId])
  @@map("user_consoles")
}

// ============================================================================
// IGDB GAME MODELS
// ============================================================================

model IgdbAlternativeName {
  id        Int      @id // IGDB ID directly
  checksum  String?
  comment   String?  // Description of what kind of alternative name (Acronym, Working title, Japanese title etc)
  gameId    Int      @map("game_id") // The game this alternative name is associated with
  name      String   // An alternative name

  // Relations
  gameAlternativeNameRelations IgdbGameAlternativeNameRelation[]

  @@map("igdb_alternative_names")
}

model IgdbCover {
  id           Int      @id // IGDB ID directly
  alphaChannel Boolean? @map("alpha_channel")
  animated     Boolean?
  checksum     String?
  height       Int?
  imageId      String?  @map("image_id")
  url          String?
  width        Int?

  // Relations
  games        IgdbGame[]

  @@map("igdb_covers")
}

model IgdbScreenshot {
  id           Int      @id // IGDB ID directly
  alphaChannel Boolean? @map("alpha_channel")
  animated     Boolean?
  checksum     String?
  height       Int?
  imageId      String?  @map("image_id")
  url          String?
  width        Int?

  // Relations
  gameScreenshotRelations IgdbGameScreenshotRelation[]

  @@map("igdb_screenshots")
}

model IgdbArtwork {
  id           Int      @id // IGDB ID directly
  alphaChannel Boolean? @map("alpha_channel")
  animated     Boolean?
  checksum     String?
  height       Int?
  imageId      String?  @map("image_id")
  url          String?
  width        Int?

  // Relations
  gameArtworkRelations IgdbGameArtworkRelation[]

  @@map("igdb_artworks")
}

model IgdbGenre {
  id        Int      @id // IGDB ID directly
  checksum  String?
  name      String
  slug      String?
  url       String?

  // Relations
  gameGenreRelations IgdbGameGenreRelation[]

  @@map("igdb_genres")
}

model IgdbFranchise {
  id        Int      @id // IGDB ID directly
  checksum  String?
  name      String
  slug      String?
  url       String?

  // Relations
  gameFranchiseRelations IgdbGameFranchiseRelation[]

  @@map("igdb_franchises")
}

model IgdbMultiplayerMode {
  id                  Int      @id // IGDB ID directly
  campaignCoop        Boolean? @map("campaign_coop")
  checksum            String?
  dropin              Boolean?
  lancoop             Boolean?
  offlineCoop         Boolean? @map("offline_coop")
  offlineCoopMax      Int?     @map("offline_coop_max")
  offlineMax          Int?     @map("offline_max")
  onlineCoop          Boolean? @map("online_coop")
  onlineCoopMax       Int?     @map("online_coop_max")
  onlineMax           Int?     @map("online_max")
  splitscreen         Boolean?
  splitscreenOnline   Boolean? @map("splitscreen_online")

  // Relations
  gameMultiplayerRelations IgdbGameMultiplayerRelation[]

  @@map("igdb_multiplayer_modes")
}

model IgdbGame {
  id                    Int      @id // IGDB ID directly
  checksum              String?
  coverId               Int?     @map("cover_id")
  name                  String
  slug                  String?
  summary               String?  @db.Text
  storyline             String?  @db.Text
  url                   String?
  
  // Ratings
  aggregatedRating      Float?   @map("aggregated_rating")
  aggregatedRatingCount Int?     @map("aggregated_rating_count")
  rating                Float?
  ratingCount           Int?     @map("rating_count")
  totalRating           Float?   @map("total_rating")
  totalRatingCount      Int?     @map("total_rating_count")
  
  // Dates
  firstReleaseDate      BigInt?  @map("first_release_date")
  createdAt             BigInt?  @map("created_at")
  updatedAt             BigInt?  @map("updated_at")
  
  // Game metadata
  gameType              Int?     @map("game_type") // Reference to Game Type
  gameStatus            Int?     @map("game_status") // Reference to Game Status
  parentGameId          Int?     @map("parent_game_id") // If DLC/expansion
  versionParentId       Int?     @map("version_parent_id") // If version
  versionTitle          String?  @map("version_title")
  franchiseId           Int?     @map("franchise_id") // Main franchise
  
  // Arrays - stored as IGDB IDs
  alternativeNames      Int[]    @map("alternative_names") // Array of Alternative Name IDs
  platforms             Int[]    // Array of Platform IDs
  
  // Related games
  dlcs                  Int[]    // Array of DLC Game IDs
  expansions            Int[]    // Array of Expansion Game IDs
  standaloneExpansions  Int[]    @map("standalone_expansions") // Array of Standalone Expansion IDs
  forks                 Int[]    // Array of Fork Game IDs
  remakes               Int[]    // Array of Remake Game IDs
  remasters             Int[]    // Array of Remaster Game IDs
  
  // Stats
  
  // Full IGDB data JSON backup
  igdbData              String?  @db.Text @map("igdb_data")

  // Relations to our normalized tables
  cover                 IgdbCover? @relation(fields: [coverId], references: [id])

  // User game relations (required by Prisma for bidirectional relation)
  userGames             Game[]

  // Many-to-many relationships to our detailed tables
  gameScreenshotRelations IgdbGameScreenshotRelation[]
  gameArtworkRelations    IgdbGameArtworkRelation[]
  gameGenreRelations      IgdbGameGenreRelation[]
  gameFranchiseRelations  IgdbGameFranchiseRelation[]
  gameMultiplayerRelations IgdbGameMultiplayerRelation[]
  gameAlternativeNameRelations IgdbGameAlternativeNameRelation[]

  // Additional many-to-many relationships for array fields
  gameGameModeRelations          IgdbGameModeRelation[]                @relation("IgdbGameGameModes")
  gamePlayerPerspectiveRelations IgdbGamePlayerPerspectiveRelation[]  @relation("IgdbGamePlayerPerspectives")
  gameEngineRelations            IgdbGameEngineRelation[]              @relation("IgdbGameEngines")
  gameThemeRelations             IgdbGameThemeRelation[]               @relation("IgdbGameThemes")
  gameAgeRatingRelations         IgdbGameAgeRatingRelation[]           @relation("IgdbGameAgeRatings")
  gameWebsiteRelations           IgdbGameWebsiteRelation[]             @relation("IgdbGameWebsites")
  gameVideoRelations             IgdbGameVideoRelation[]               @relation("IgdbGameVideos")
  gameLanguageSupportRelations   IgdbGameLanguageSupportRelation[]     @relation("IgdbGameLanguageSupports")
  
  @@map("igdb_games")
}

// ============================================================================
// IGDB GAME RELATIONSHIP MODELS (Many-to-Many)
// ============================================================================

model IgdbGameScreenshotRelation {
  id           Int             @id @default(autoincrement())
  gameId       Int             @map("game_id")
  screenshotId Int             @map("screenshot_id")

  // Relations
  game         IgdbGame        @relation(fields: [gameId], references: [id])
  screenshot   IgdbScreenshot  @relation(fields: [screenshotId], references: [id])

  @@unique([gameId, screenshotId])
  @@map("igdb_game_screenshot_relations")
}

model IgdbGameArtworkRelation {
  id        Int         @id @default(autoincrement())
  gameId    Int         @map("game_id")
  artworkId Int         @map("artwork_id")

  // Relations
  game      IgdbGame    @relation(fields: [gameId], references: [id])
  artwork   IgdbArtwork @relation(fields: [artworkId], references: [id])

  @@unique([gameId, artworkId])
  @@map("igdb_game_artwork_relations")
}

model IgdbGameGenreRelation {
  id      Int       @id @default(autoincrement())
  gameId  Int       @map("game_id")
  genreId Int       @map("genre_id")

  // Relations
  game    IgdbGame  @relation(fields: [gameId], references: [id])
  genre   IgdbGenre @relation(fields: [genreId], references: [id])

  @@unique([gameId, genreId])
  @@map("igdb_game_genre_relations")
}

model IgdbGameFranchiseRelation {
  id          Int           @id @default(autoincrement())
  gameId      Int           @map("game_id")
  franchiseId Int           @map("franchise_id")

  // Relations
  game        IgdbGame      @relation(fields: [gameId], references: [id])
  franchise   IgdbFranchise @relation(fields: [franchiseId], references: [id])

  @@unique([gameId, franchiseId])
  @@map("igdb_game_franchise_relations")
}

model IgdbGameMultiplayerRelation {
  id               Int                 @id @default(autoincrement())
  gameId           Int                 @map("game_id")
  multiplayerModeId Int                @map("multiplayer_mode_id")

  // Relations
  game             IgdbGame            @relation(fields: [gameId], references: [id])
  multiplayerMode  IgdbMultiplayerMode @relation(fields: [multiplayerModeId], references: [id])

  @@unique([gameId, multiplayerModeId])
  @@map("igdb_game_multiplayer_relations")
}

// ============================================================================
// IGDB JUNCTION/RELATION TABLES
// ============================================================================

model IgdbGameAlternativeNameRelation {
  gameId            Int @map("game_id")
  alternativeNameId Int @map("alternative_name_id")

  // Relations
  game            IgdbGame           @relation(fields: [gameId], references: [id])
  alternativeName IgdbAlternativeName @relation(fields: [alternativeNameId], references: [id])

  @@id([gameId, alternativeNameId])
  @@map("igdb_game_alternative_name_relations")
}

// IGDB Game Mode normalization
model IgdbGameMode {
  id        Int      @id // IGDB ID directly
  checksum  String?  @map("checksum")
  createdAt BigInt?  @map("created_at")
  name      String   @map("name")
  slug      String?  @map("slug")
  updatedAt BigInt?  @map("updated_at")
  url       String?  @map("url")

  // Relations
  games IgdbGameModeRelation[]

  @@map("igdb_game_modes")
}

// IGDB Player Perspective normalization
model IgdbPlayerPerspective {
  id        Int      @id // IGDB ID directly
  checksum  String?  @map("checksum")
  createdAt BigInt?  @map("created_at")
  name      String   @map("name")
  slug      String?  @map("slug")
  updatedAt BigInt?  @map("updated_at")
  url       String?  @map("url")

  // Relations
  games IgdbGamePlayerPerspectiveRelation[]

  @@map("igdb_player_perspectives")
}

// IGDB Game Engine normalization
model IgdbGameEngine {
  id          Int      @id // IGDB ID directly
  checksum    String?  @map("checksum")
  companies   Int[]    @map("companies") // Array of Company IDs
  createdAt   BigInt?  @map("created_at")
  description String?  @map("description") @db.Text
  logoId      Int?     @map("logo_id") // Reference to Game Engine Logo
  name        String   @map("name")
  platforms   Int[]    @map("platforms") // Array of Platform IDs
  slug        String?  @map("slug")
  updatedAt   BigInt?  @map("updated_at")
  url         String?  @map("url")

  // Relations
  games IgdbGameEngineRelation[]

  @@map("igdb_game_engines")
}

// IGDB Theme normalization
model IgdbTheme {
  id        Int      @id // IGDB ID directly
  checksum  String?  @map("checksum")
  createdAt BigInt?  @map("created_at")
  name      String?  @map("name")
  slug      String?  @map("slug")
  updatedAt BigInt?  @map("updated_at")
  url       String?  @map("url")

  // Relations
  games IgdbGameThemeRelation[]

  @@map("igdb_themes")
}

// IGDB Age Rating normalization
model IgdbAgeRating {
  id                        Int     @id // IGDB ID directly
  checksum                  String? @map("checksum")
  contentDescriptions       Int[]   @map("content_descriptions") // Array of Age Rating Content Description IDs
  organizationId            Int?    @map("organization_id") // Reference to Age Rating Organization
  ratingCategoryId          Int?    @map("rating_category_id") // Reference to Age Rating Category
  ratingContentDescriptions Int[]   @map("rating_content_descriptions") // Array of Age Rating Content Description V2 IDs
  ratingCoverUrl            String? @map("rating_cover_url")
  synopsis                  String? @map("synopsis")

  // Relations
  games IgdbGameAgeRatingRelation[]

  @@map("igdb_age_ratings")
}

// IGDB Website normalization
model IgdbWebsite {
  id         Int      @id // IGDB ID directly
  checksum   String?  @map("checksum")
  gameId     Int?     @map("game_id") // Reference to Game
  trusted    Boolean? @map("trusted")
  typeId     Int?     @map("type_id") // Reference to Website Type
  url        String   @map("url")

  // Relations
  games IgdbGameWebsiteRelation[]

  @@map("igdb_websites")
}

// IGDB Video normalization
model IgdbVideo {
  id       Int     @id // IGDB ID directly
  checksum String? @map("checksum")
  gameId   Int?    @map("game_id") // Reference to Game
  name     String? @map("name")
  videoId  String? @map("video_id") // YouTube video ID

  // Relations
  games IgdbGameVideoRelation[]

  @@map("igdb_videos")
}

// IGDB Language Support normalization
model IgdbLanguageSupport {
  id                    Int     @id // IGDB ID directly
  checksum              String? @map("checksum")
  createdAt             BigInt? @map("created_at")
  gameId                Int?    @map("game_id") // Reference to Game
  languageId            Int?    @map("language_id") // Reference to Language
  languageSupportTypeId Int?    @map("language_support_type_id") // Reference to Language Support Type
  updatedAt             BigInt? @map("updated_at")

  // Relations
  games IgdbGameLanguageSupportRelation[]

  @@map("igdb_language_supports")
}

// Junction tables for many-to-many relationships

model IgdbGameModeRelation {
  gameId     Int @map("game_id")
  gameModeId Int @map("game_mode_id")

  game     IgdbGame     @relation("IgdbGameGameModes", fields: [gameId], references: [id], onDelete: Cascade)
  gameMode IgdbGameMode @relation(fields: [gameModeId], references: [id], onDelete: Cascade)

  @@id([gameId, gameModeId])
  @@map("igdb_game_mode_relations")
}

model IgdbGamePlayerPerspectiveRelation {
  gameId              Int @map("game_id")
  playerPerspectiveId Int @map("player_perspective_id")

  game               IgdbGame             @relation("IgdbGamePlayerPerspectives", fields: [gameId], references: [id], onDelete: Cascade)
  playerPerspective  IgdbPlayerPerspective @relation(fields: [playerPerspectiveId], references: [id], onDelete: Cascade)

  @@id([gameId, playerPerspectiveId])
  @@map("igdb_game_player_perspective_relations")
}

model IgdbGameEngineRelation {
  gameId       Int @map("game_id")
  gameEngineId Int @map("game_engine_id")

  game       IgdbGame       @relation("IgdbGameEngines", fields: [gameId], references: [id], onDelete: Cascade)
  gameEngine IgdbGameEngine @relation(fields: [gameEngineId], references: [id], onDelete: Cascade)

  @@id([gameId, gameEngineId])
  @@map("igdb_game_engine_relations")
}

model IgdbGameThemeRelation {
  gameId  Int @map("game_id")
  themeId Int @map("theme_id")

  game  IgdbGame  @relation("IgdbGameThemes", fields: [gameId], references: [id], onDelete: Cascade)
  theme IgdbTheme @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@id([gameId, themeId])
  @@map("igdb_game_theme_relations")
}

model IgdbGameAgeRatingRelation {
  gameId      Int @map("game_id")
  ageRatingId Int @map("age_rating_id")

  game      IgdbGame      @relation("IgdbGameAgeRatings", fields: [gameId], references: [id], onDelete: Cascade)
  ageRating IgdbAgeRating @relation(fields: [ageRatingId], references: [id], onDelete: Cascade)

  @@id([gameId, ageRatingId])
  @@map("igdb_game_age_rating_relations")
}

model IgdbGameWebsiteRelation {
  gameId    Int @map("game_id")
  websiteId Int @map("website_id")

  game    IgdbGame    @relation("IgdbGameWebsites", fields: [gameId], references: [id], onDelete: Cascade)
  website IgdbWebsite @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@id([gameId, websiteId])
  @@map("igdb_game_website_relations")
}

model IgdbGameVideoRelation {
  gameId  Int @map("game_id")
  videoId Int @map("video_id")

  game  IgdbGame  @relation("IgdbGameVideos", fields: [gameId], references: [id], onDelete: Cascade)
  video IgdbVideo @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@id([gameId, videoId])
  @@map("igdb_game_video_relations")
}

model IgdbGameLanguageSupportRelation {
  gameId            Int @map("game_id")
  languageSupportId Int @map("language_support_id")

  game            IgdbGame            @relation("IgdbGameLanguageSupports", fields: [gameId], references: [id], onDelete: Cascade)
  languageSupport IgdbLanguageSupport @relation(fields: [languageSupportId], references: [id], onDelete: Cascade)

  @@id([gameId, languageSupportId])
  @@map("igdb_game_language_support_relations")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum Condition {
  MINT
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum UserConsoleStatus {
  OWNED
  WISHLIST
  SOLD
}
