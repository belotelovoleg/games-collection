// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          Role      @default(USER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  games    Game[]
  userConsoles UserConsole[]

  @@map("users")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Game collection models
model Game {
  id          String      @id @default(cuid())
  title       String
  platform    Platform
  condition   Condition   @default(GOOD)
  genre       String?
  developer   String?
  publisher   String?
  releaseYear Int?
  price       Float?
  purchaseDate DateTime?
  notes       String?
  imageUrl    String?
  completed   Boolean     @default(false)
  favorite    Boolean     @default(false)
  
  // Relations
  userId      String      @map("user_id")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("games")
}

// Console/Platform model for IGDB integration
model Console {
  id                    Int      @id @default(autoincrement())
  igdbPlatformID        Int?     @map("igdb_platform_id")
  igdbPlatformVersionID Int?     @map("igdb_platform_version_id")
  name                  String
  photo                 String?
  abbreviation          String?
  alternativeName       String?  @map("alternative_name")
  generation            Int?
  platformFamily        String?  @map("platform_family")
  platformType          String?  @map("platform_type")
  
  // Relations to cached IGDB data (updated to reference igdbId fields)
  igdbPlatform          IgdbPlatform?        @relation(fields: [igdbPlatformID], references: [id])
  igdbPlatformVersion   IgdbPlatformVersion? @relation(fields: [igdbPlatformVersionID], references: [id])
  
  // User console relations
  userConsoles          UserConsole[]
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("consoles")
}

// ============================================================================
// IGDB NORMALIZED MODELS (CLEANED - NO LOCAL TIMESTAMPS)
// ============================================================================

model IgdbPlatformLogo {
  id           Int      @id // IGDB ID directly
  alphaChannel Boolean? @map("alpha_channel")
  animated     Boolean?
  checksum     String?
  height       Int?
  imageId      String?  @map("image_id")
  url          String?
  width        Int?

  // Relations
  platforms        IgdbPlatform[]
  platformVersions IgdbPlatformVersion[]

  @@map("igdb_platform_logos")
}

model IgdbPlatformFamily {
  id        Int      @id // IGDB ID directly
  checksum  String?
  name      String
  slug      String?

  // Relations
  platforms IgdbPlatform[]

  @@map("igdb_platform_families")
}

model IgdbPlatformType {
  id              Int      @id // IGDB ID directly
  checksum        String?
  name            String

  // Relations
  platforms IgdbPlatform[]

  @@map("igdb_platform_types")
}

model IgdbCompanyLogo {
  id           Int      @id // IGDB ID directly
  alphaChannel Boolean? @map("alpha_channel")
  animated     Boolean?
  checksum     String?
  height       Int?
  imageId      String?  @map("image_id")
  url          String?
  width        Int?

  // Relations
  companies IgdbCompany[]

  @@map("igdb_company_logos")
}

model IgdbCompany {
  id                  Int      @id // IGDB ID directly
  changeDate          BigInt?  @map("change_date")
  changeDateFormatId  Int?     @map("change_date_format_id")
  changedCompanyId    Int?     @map("changed_company_id")
  checksum            String?
  country             Int?
  description         String?  @db.Text
  logoId              Int?     @map("logo_id")
  name                String
  parentId            Int?     @map("parent_id")
  slug                String?
  startDate           BigInt?  @map("start_date")
  startDateFormatId   Int?     @map("start_date_format_id")
  statusId            Int?     @map("status_id")
  url                 String?

  // Relations - keep only logo relation, remove all foreign key constraints
  logo                IgdbCompanyLogo? @relation(fields: [logoId], references: [id])

  @@map("igdb_companies")
}

model IgdbWebsiteType {
  id              Int      @id // IGDB ID directly
  checksum        String?
  type            String

  // Relations
  platformWebsites IgdbPlatformWebsite[]

  @@map("igdb_website_types")
}

model IgdbPlatformWebsite {
  id        Int      @id // IGDB ID directly
  checksum  String?
  trusted   Boolean  @default(false)
  typeId    Int?     @map("type_id")
  url       String

  // Relations
  type      IgdbWebsiteType? @relation(fields: [typeId], references: [id])
  platformWebsiteRelations IgdbPlatformWebsiteRelation[]

  @@map("igdb_platform_websites")
}

model IgdbPlatform {
  id                Int      @id // IGDB ID directly
  abbreviation      String?
  alternativeName   String?  @map("alternative_name")
  checksum          String?
  generation        Int?
  name              String
  platformFamilyId  Int?     @map("platform_family_id")
  platformLogoId    Int?     @map("platform_logo_id")
  platformTypeId    Int?     @map("platform_type_id")
  slug              String?
  summary           String?  @db.Text
  url               String?
  versions          Int[]    // Array of platform version IDs from IGDB
  igdbData          String?  @db.Text @map("igdb_data")

  // Relations
  platformFamily    IgdbPlatformFamily? @relation(fields: [platformFamilyId], references: [id])
  platformLogo      IgdbPlatformLogo?   @relation(fields: [platformLogoId], references: [id])
  platformType      IgdbPlatformType?   @relation(fields: [platformTypeId], references: [id])
  
  // Many-to-many relationships
  platformVersionRelations IgdbPlatformVersionRelation[]
  platformWebsiteRelations IgdbPlatformWebsiteRelation[]
  
  // Existing console relations
  consoles          Console[]

  @@map("igdb_platforms")
}

model IgdbPlatformVersion {
  id                    Int      @id // IGDB ID directly
  checksum              String?
  connectivity          String?
  cpu                   String?
  graphics              String?
  mainManufacturerId    Int?     @map("main_manufacturer_id")
  media                 String?
  memory                String?
  name                  String
  os                    String?
  output                String?
  platformLogoId        Int?     @map("platform_logo_id")
  resolutions           String?
  slug                  String?
  sound                 String?
  storage               String?
  summary               String?  @db.Text
  url                   String?
  igdbData              String?  @db.Text @map("igdb_data")

  // Relations - simplified, no strict foreign keys for companies
  platformLogo          IgdbPlatformLogo? @relation(fields: [platformLogoId], references: [id])
  
  // Many-to-many relationships (removed release dates)
  platformVersionRelations IgdbPlatformVersionRelation[]
  
  // Existing console relations
  consoles              Console[]

  @@map("igdb_platform_versions")
}

// ============================================================================
// RELATIONSHIP MODELS (Many-to-Many)
// ============================================================================

model IgdbPlatformVersionRelation {
  id                Int      @id @default(autoincrement())
  platformId        Int      @map("platform_id")
  versionId         Int      @map("version_id")

  // Relations
  platform          IgdbPlatform        @relation(fields: [platformId], references: [id])
  platformVersion   IgdbPlatformVersion @relation(fields: [versionId], references: [id])

  @@unique([platformId, versionId])
  @@map("igdb_platform_version_relations")
}

model IgdbPlatformWebsiteRelation {
  id                Int      @id @default(autoincrement())
  platformId        Int      @map("platform_id")
  websiteId         Int      @map("website_id")

  // Relations
  platform          IgdbPlatform        @relation(fields: [platformId], references: [id])
  website           IgdbPlatformWebsite @relation(fields: [websiteId], references: [id])

  @@unique([platformId, websiteId])
  @@map("igdb_platform_website_relations")
}

model IgdbPlatformVersionCompanyRelation {
  id                        Int      @id @default(autoincrement())
  platformVersionId         Int      @map("platform_version_id")
  companyId                 Int      @map("company_id")

  @@unique([platformVersionId, companyId])
  @@map("igdb_platform_version_company_relations")
}

// User console collection model
model UserConsole {
  id        String              @id @default(cuid())
  userId    String              @map("user_id")
  consoleId Int                 @map("console_id")
  status    UserConsoleStatus   @default(OWNED)
  notes     String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  // Relations
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  console   Console             @relation(fields: [consoleId], references: [id], onDelete: Cascade)

  @@unique([userId, consoleId])
  @@map("user_consoles")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum Platform {
  PLAYSTATION_1
  PLAYSTATION_2
  PLAYSTATION_3
  PLAYSTATION_4
  PLAYSTATION_5
  XBOX
  XBOX_360
  XBOX_ONE
  XBOX_SERIES
  NINTENDO_SWITCH
  NINTENDO_3DS
  NINTENDO_WII
  NINTENDO_WII_U
  PC
  OTHER
}

enum Condition {
  MINT
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum UserConsoleStatus {
  OWNED
  WISHLIST
  SOLD
}
